name: Standard Workflow CI

on: [push]

jobs:
  check_build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: Check_Build
        env:
          DOCKERHUB_ORG: bicf
          DEPLOY_BRANCH: ${{secrets.DEPLOY_BRANCH}}
          LC_ALL: C.UTF-8
          LANG: C.UTF-8
          CONTINUE: ${{ false }}
        run: |
          set -e
          source scripts/functions.sh
          git config user.name github-actions
          git config user.email github-actions@github.com
          fetch_develop
          #Check to see if more than one Dockerfile has been updated, and if so, error out.
          compare_range=$(get_compare_range)
          paths=$(changed_paths_in_range "${compare_range}")
          print_changed "${compare_range}" "${paths}"
          docker_counter=`print_changed "${compare_range}" "${paths}" | grep -i "/dockerfile$" | wc -l`
          if [ "${docker_counter}" -gt "1" ]; then
            echo -e "ERROR: Currently we only support uploading one Dockerfile at a time, please break these into separate branches."
            exit 1
          elif [ "${docker_counter}" -eq "1" ]; then
            echo "New or updated Dockerfile found, building image and running CI"
            #Check to see if the proposed version already exists in master
            git show origin/master:relations.yaml > master_relation.yml
            docker_file=`print_changed "${compare_range}" "${paths}" | grep -i "/dockerfile$"`
            python3 scripts/check_pre-exist.py master_relation.yml ${docker_file}
            rm master_relation.yml
            build_images "${DOCKERHUB_ORG}" "${paths}"
            python3 tests/imagecheck.py "${DOCKERHUB_ORG}" ${paths}
            git show ${DEPLOY_BRANCH}:relations.yaml > relations.yaml
            python3 scripts/relational.py ${docker_file}
            image_name=`echo ${docker_file} | rev | cut -f3 -d '/' | rev`
            image_version=`echo ${docker_file} | rev | cut -f2 -d '/' | rev`
            docker_image=`echo -e "${image_name}:${image_version}"`
            echo "::set-env name=DOCKER_IMAGE::`echo ${DOCKERHUB_ORG}/${docker_image}`"
            echo "::set-env name=CONTINUE::${{ true }}"
          else
            echo "No new images found, running CI only."
            find -maxdepth 0 -type d | grep -v "^scripts$\|^tests$"
            for i in `find -maxdepth 0 -type d | grep -v "^scripts$\|^tests$"`; do
              python3 tests/imagecheck.py "${DOCKERHUB_ORG}" `find ${i}/*/* -printf "%T@ %Tc %p\n" | grep -i "/dockerfile$" | sort -n | tail -n 1 | cut -f9 -d ' '`
              done
          fi
  commit_new_release:
    needs: check_build
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        if: env.CONTINUE == true
        with:
          fetch-depth: 0
      - id: Commit_New_Relations
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add relations.yaml
          git commit --allow-empty -m "Updated relations.yaml"

      - id: Push_New_Relations
        uses: ad-m/github-push-action@master
        if: env.CONTINUE == true
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          branch: "${{ github.ref }}"
  dockerhub_push:
    needs: commit_new_release
    runs-on: ubuntu-18.04
    steps:
      - id: DockerHub_Login
        uses: actions-hub/docker/login@master
        if: env.CONTINUE == true
        env:
          DOCKER_PASSWORD: ${{secrets.BICF_DOCKERHUB_PW}}
          DOCKER_USERNAME: ${{secrets.BICF_DOCKERHUB_UN}}

      - id: Push_to_DockerHub
        uses: actions-hub/docker@master
        if: env.CONTINUE == ${{ true }}
        with:
          args: push ${DOCKER_IMAGE}
